==========================================================================
DEVELOPMENT LOG
A project by: Benedict Bolton, Shahruz Ghaemi
              Tweed & Co., Inc.
              Premium Election Riggers, Graft Dispensers, & Corruptioneers
              New York, New York
==========================================================================


         ()__                 ()__               ()__
         ||**Z__              ||**Z__            ||**Z__
         ||**|**=Z____        ||**|**=Z____      ||**|**=Z____
         ||**|**=|====|       ||**|**=|====|     ||**|**=|====|   
         ||==|**=|====|       ||==|**=|====|     ||==|**=|====|
         ||""|===|====|       ||""|===|====|     ||""|===|====|
         ||  `"""|====|       ||  `"""|====|     ||  `"""|====|
     jgs ||      `""""`	      ||      `""""`     ||      `""""`   
==========================================================================         
	   ____    __             ___   ____   ____   ___    ___
	  /	  /  \  |\    |  /   \ |    \ |   `  /   \  /   \
 	 |	 |    | | \   | |      |    / |     |      |
 	 |	 |    | |  \  | |      |----  |---   \___   \___
  	 |	 |    | |   \ | |  --^ |   \  |          \      \
      	  \____   \__/  |    \|  \___/ |    \ |____  \___/  \___/
       ___   _____        ___  ___ ___      __   _______  ____   ____
      /   \    |   |\  /|  |    |   |      /  \     |    / __ \  |   \
      \___     |   | \/ |  |    |   |     | /\ |    |    | || |  |___/
          \    |   |    |  |    |   |   _ | || |    |    | || |  |  \
      \___/  __|__ |    |   \__/    |___| |    |    |    \____/  |   \

===========================================================================
LOG OF NON-CORRUPTION RELATED TRANSACTIONS
     --nothing to see here, IRS--

2014-1-8: began working on project, this simulator developed out of one of Ben's proposals
	  GitHub repo created ( Tweed-and-Co. )

2014-1-9: tested pushing and pulling simple .txt files to the repo, from school
          
2014-1-10: began diagramming and flow-charting the project
	   started with the idea of many classes with similar instance variables whose values would affect and be affected by decisions made by other classes
	   started with the idea of two superclasses of Objects: those that change world variables (Generating) and those whose variables are changed (Affected)

2014-1-12: tested pushing and pulling capabilities from home

2014-1-13: refined and focused our UML diagrams
    	   the Affected class of Objects would be the superclass of:
		--Senate, representing the 99 other Senators as a collective 
		--Public, representing the economy and general war-/peace-sentiments of the populace
		--District, representing the political demographics of the player's constituents
	   the classes that would generate changes (though not necessarily descended from a superclass):
		--Player, representing the player's Senator
		--Driver, representing the simulated world and containing all the loops and instantiated Objects necessary for gameplay

2014-1-14: typed up first .java file and pushed to repo
	   this was the Affected superclass 
	   for some reason, called it Others.java
	   created the instance variables we deemed necessary for all subclasses:
		--(double) the percent composition of each party
		--(double) the percent extremism/willingness to compromise of each party    
    		--(long) the average income of the person/collection of persons represented
		--(int) the level of gung-ho, gun-toting, democracy-spreading spirit (named by Benedict as _hawkLvl)
		--(int) the level of thoughtful, world-peace-promoting willingness to co-operate in the international framework 
		        (named by Ben as _careBearLvl because of the children's toys Care Bears and also because of the animal-naming precedent)
	  planned for the Public and District subclasses to also have:
		--an instance variable representing the number of jobs (aka the health of the economy)
	  wrote accessors for these instance variables in Others.java 
	  cooperated on Ben's machine in class to code

2014-1-15: created the voteLegis() method in superclass Others [Ben]
	   this method takes in a certain piece of Legislation and calculates the Object's support for said Legislation based on how well its instance variables match up with the type of bill
	   created the Legislation class, empty for now [Ben]
	   beginnings of deviation from carefully structured UML diagrams: for example, Legislation is neither affect-generating nor affected
	   created the Senate class, with only a randomizing default constructor [Shahruz]
	   added mutators to superclass Others [Shahruz]

2014-1-16: created the Driver [Ben]
	   set up the beginnings of gameplay loops: [Ben]
		--while the player is elected, present a series of Legislations for the player to vote up or down, or stall in the Senate with a variety of tactics
 	   in class, determined that the economic policy of a Legislation passed would affect the world variables:
		--populist bills increase jobs, do not affect average income, and lower the stock market
		--trickle-down bills increase jobs, decrease average income, and raise the stock market
		--modernising/outsourcing bills lower jobs, raise income, and raise stocks
	   planned that if jobs fell too far, something bad would happen
	   gave Legislation some instance variables: [Ben]
		--the text of the bill
		--the economic policy (populist, trickle-down, neutral, or none)
		--the social policy (liberal, conservative, facist, libertarian, or none)
		--the foreign policy (American assertion, cooperation with other countries, isolationism, or none)
	   began to implement the voteLegis() method: [Shahruz]
		--a bill automatically gains the support of 30% of the party that proposed it
		--a bill gains Republican votes for being economically or socially conservative and for being aggressive in foreign policy
		--a bill gains Democratic votes for being economically populist or socially liberal and for being accomodating in foreign policy
	   typed up 13 bills (13!!!) [Ben]
	   created a 2-D array (int[][]) to hold Legislations at the top level and the Legislation's attribute values in the secondary level [Ben]

2014-1-17: worked on world generation in Driver, creating a Senate and a State (replacing the idea of the District class, but still representing the players' constituents)
	   created State class, State is-a Others [Shahruz]
	   State has the following:
		--a String stateName instance variable, self-explanatory
		--a constructor that takes a String input and determines if that input state name is a Republican-leaning or Democrat-leaning state
	   created Event class, empty for now

2014-1-18: added instance variables for Legislation: [Ben]
		--(int) propParty, 0 for Republican-proposed and 1 for Democrat-proposed, 2 for Bipartisan-support
		--(int) porkBarrel, 0 for no and 1 for a bill that does underhandedly appropriate funds for the player's own constituents
		--(int) selfEnrichment, 0 for no and 1 for a bill that does secretly increase the player's own salary
	   added 5 corrupt bills that either appropriate funds sneakily or enrich the player, etc etc [Ben]
	   added accessor methods for all Legislation's new instance variables [Ben]
	   created a toString() for Legislation that pritns out the text of the bill as well as textual indications of the bill's attributes (its economic policy, its corruption, etc etc)
	   worked on world generation in Driver: [Shahruz]
		--compartmentalized functions for generating Senate, State objects
		--added text at the beginning
		--used the imported cs1 Keyboard class to get user-input prompts for creating a senator from a State of the player's input
	   thought about renaming the oddly-named Others superclass into Actors or even back to Affected, this never happened 
	   added an array to hold the Legislations already completed (whether passed, failed, or stalled in Congress) [Ben]
	   added another array to hold connected information about the player's individual vote on the bill [Ben]

2014-1-19: fleshed out Events class: [Ben]
		--holds 20 events happening overseas
		--each event has 4 possible choices for the player to make (correspond to aggressiveness, accomodation, isolationism, and humanitarian)
	   worked on Driver loop-sequence: [Ben]
		--after a Legislation is finished (passed, failed, sent to bill hell), an Event occurs
		--there is a while-legislation-occuring loop followed by a while-event-occuring loop during one iteration of the while-elected loop
		--added text that indicates the player's awesome personal charisma can significantly alter the vote in the Senate on a Legislation
	   added toString() to State and Senate: [Shahruz]
		--print out the political composition of the object
		--prints out the political extremism of both parties
		--displays the _hawkLvl, _careBearLvl, and average income
	   incorporated error handling into world generation: [Shahruz]
		--added exception-throwing to the State overloaded constructor
		--if the player-input String is not one of the 50 states, the constructor throws an Exception
		--had a lot of hassle getting the try-catch flow to get by the compiler

2014-1-20: worked on the voteLegis() method in superclass Others: [Shahruz]
		--a bill gets the non-extremist votes of both parties for being Bipartisan-proposed 
		--a bill gets some Democratic votes and more Republican votes for being economically modernising
		--a bill gets Democratic votes for being economically populist
		--a bill gets Republican votes for being trickle-down
		--a bill gets the hawkish Republicans and some hawkish Democrats for being aggressive in foreign policy
		--a bill gets the caring Democrats and some caring Republicans for being internationalist/"UN hippie stuff"
		--a bill loses support (gets only negative votes) for being isolationist
		--a bill gets Republican votes for being socially conservative
		--a bill gets Democratic votes for being socially liberal
		--these numbers were all worked out by adding to the support the number of votes remaining * a multiplier (usually based on the extremism levels)
	   created a delay() method in Driver to stop and ask for user input, to allow the player to read on-screen text [Shahruz]
	   created the legisAchievement() method in Player: [Shahruz]
		--takes a Legislation input
		--to tally up how well the player did on a specific Legislation in the eyes of the constituents 
		--based on the homeState majority party 
		--if this bill is Democratic and passes while the player represents a Republican state, the score will be lower (possible negative)
	   streamlined Driver [Shahruz]
	   everything gameplay-ready up until the player casts a vote for a Legislation
	   began working on javadocs [Ben]
	   added outcomes and text-indicators for the fate of a Legislation based on the support calculated in voteLegis() [Ben]

2014-1-21: in Driver, added each successive piece of Legislation to an ArrayList<Legislation> (whether passed, failed, or stalled) [Ben]
	   corollay, added the player's individual vote on that Legislation to an ArrayList<String> [Ben]
		--to be accessed by State in determining the player's job performance come election time
	   math wasn't coming out right in voteLegis, so added diagnostic outputs [Shahruz]
	   
2014-1-22: improved the math in voteLegis() by eliminating some of the factors that could affect it [Shahruz]
	   discovered the Math.rint() method which rounds a messy double to two decimal places, used it in Others to return two-digit doubles in voteLegis() [Shahruz]
	   incorporated the beginnings of an election loop: [Ben]
		--every 6 years, the player's home State gets to evaluate his performance in office
		--player can be kicked out of game if found unsatisfactory
		--6 years determined by 3 Legislations and 3 Events (aka 1 while(elected) iteration = 2 years)
	   wrote a popularity() method in State: [Ben]
		--takes an ArrayList<Legislation> input, representing the Legislation passed by Congress
		--takes an ArrayList<String> input, representing the player's vote on the corresponding Legislation
		--if the player voted FOR a bill the State didn't like, his popularity goes down, and vice versa
		--bills the state likes determined by the majority party in the State
		--Republican, trickle-down, socially conservative bills not popular in Democratic states
	   popularity() in State trying to accomplish the same thing as legisAchievement() in Player:
		--we decided to go with popularity() in State
		--since Driver already contained an ArrayList<Legislation> for finished legislations and an ArrayList<String> for the player's votes

2014-1-23: added javadocs comments [Ben]
	   polished Driver up by including more delay() [Shahruz]
	   wrote the playerChoose() in Driver to give the player a chance to review the statistics of Senate or his home state before voting on a bill [Shahruz]
	   added ending text [Ben]
	   added election mechanism which tabulates popularity and returns the results (if the player got re-elected or not) [Ben]
	   compartmentalized the election mechanism into a separate function in Driver [Shahruz]
	   added ASCII art to the election mechanism of the American flag, Uncle Sam to get that patriotic vibe [Shahruz]
	   general touch-ups prior to alpha release [Shahruz]
====================================================================================
Obstacles Overcome

Interaction between many different classes in all significant methods, made effective testing difficult for us. Much work
had to be completed before the tests were run. Yet, by pushing through the coding and prioritizing and communicating
constantly what each other thought should be added to the repo next, we were able to develop effeciently enough that 
with relatively small delays we could see whether our classes we working once the other person had completed their work for
that day.

Learning error Hangdling and javadocs. We knew neither of these in the slightest at the start of the project, well we knew
a little bit of error handling, but our team thought javadocs was file I/O a the start. We had to become familiar with these
concepts by the end so we could have any hope of putting some strech in our project. But, by going through the textbook,
and/or taking abundant advantage of the Oracle tutorials and documentation availalble online.

Proper and relatively clean storage of all the data we needed to check to run Driver.java. We initially had issues 
figuring out how exactly we were to store data with multiple dimensions to and possibilites, or had simple more standard
2-D array structure yet needed to be of a possibly unlimited size. We handled this by tracing out exactly what was being 
stored on lined paper, and from that we were able to visualize the shape of the data holding structure needed, and from 
that is was easy to initialize them. Then we looked at what we were filling these structure with on paper, it was simple 
to realize how to set up ints within them to serve the purposes of all the options we needed to have available for storage.

The biggest obstacle in the whole development was beating the ever-ticking clock we had counting down on us. One, good 
communication between Benedict and Shahruz greatly spread up the process, despite the excessive delays that were prevalent
thanks to the nature of the past two weeks. What helped the most in avoiding utter ruin from this obstacle was focusing on
getting down the idea of what were trying to acheive in each class, rather than fixing all the picky details. We cut back
on the time figgiting with numbers, or creating too much printed text, that while it helped the game slowed down the 
production of good code. These two factors, with a healthy dose of sleep deprivation, helped us surmount the obstalce, 
and ultimately all associated with the dreaded time crunch, and actually finish the project, woot!


====================================================================================
Unresolved Issues

There are many aspects to this simulator that we started out with that we didn't get to incorporate into the final version.
We originally envisioned a much wider world-simulator, with the political demographics of the nation changing every few
years or so as each party rose in one place. Having this fluctuation in the player's own state would make for more challenging
gameplay. The player would have to respond to the new political trends, not just sticking with the same old schtick.

In addition, our code was not written in the most organized manner. As we went along, we found we needed methods
here or there that we found a way around using later. So we kind of picked up things that aren't all completely utilized
in the final version. There was lots of commenting-out happening during this project as we experimented with what worked.

Another issue is that the number-crunching in some of our functions, specifically popularity() in the State class, is still
wonky. It took a couple of days just to troubleshoot the number-crunching problems in other functions. The problem has to
stem from the complexity of the task. There are so many variables that we take into account when calculating support
for a politician or for a legislation that it's no wonder something somewhere along the line is off-center.

Another issue that came up is having ensuring all the variables have equal weights that incentivizes the user to respond
thoughtfully to the effects that could result from them. Yet, partly due to the afformentioned issues, as well as the 
unexpected time it took to try and even balance a few variables, getting all the variables and actions in balance as they
would be in a normal game continously eluded us.
====================================================================================
Cool Things Learned

Shahruz--I decided to incorporate try-catch Exception handling into this project. Luckily I only tested it on one method 
	because it was a 2-hour hassle. Trying to understand the syntax from the textbook and internet resources was the hardest
	part. Conceptually it's very simple, but it's aways the specificity of the syntax that gets me. It was a useful
	exercise in learning flow-control, because the compiler's "no-go" error messages prompted me to go back and trace
	through my code to see what exactly was going on.

Benedict--I decided to incorporate javadocs comments into our code for this porject. It certainly was very time consuming
	to carry out at times, but what was particularly striking was how much clearer the code was afterwards, with the
	purpose of the methods apparent instantly. We are often told we need to comment our code, but I feel as though few 
	people do as they rarely are working with enough people, or with a complicated enough project, to make the commenting
	a requirement to understanding. Yet, in doing the Javadocs, it was cool to learn how comments could be applied in a
	standard format to make even the most convoluted code easily readable. I also came to appreciate a bit more of the 
	power of coding from javadocs, as last year there was a ton of hard-coding we had to do for some html projects. In javadocs
	I could take only a few lines of code, run it through javadocs, and I have 1000s of bytes of html ready to go; something
	that I did not know was possible before.
	
All Together Now!-- We both came to understand github better. Particularly in how it merges code during push and pull calls,
	and the convenience from this. We also learned how to force github to cooperate with fetch and reset commands.


====================================================================================
Mid-Developmental Design Changes (and why)

Part of the way through the development of the project we realized that there were multiple aspects of the project, that 
simply due to time constraints we would not have time to implemnt. These included the Public class, the worldStability 
variable, the changing political climate in State classes, effects from Legislation on variables outside elections, 
election dynamics, and more balance voting and election functions.

The Public class was unable to be implemented mainly out of time constraints. It would have required balancing the 
voteLegislation() method, as well as the election method. It also would have created the necessity of writing at least
3 more major methods to allow for interaction between State Public which we simply did not have time to do. The 
issue of a lack of substantial implementation for worldStability is it would have had an effect mainly on the Public as
a whole. Yet, with the lack of a Public class, the implementation jumped in complexity and planning, which we simply ran
out of time to do. Finally, the issue of creating a more balanced, in terms of game theory, voteLegislation() and 
popularity() methods ran into the same issue. While we could get them functional, it would have required a lot of pure 
number crunching on our side to see what the desired modifiers and interactions between multiple input variables should be.
We simply were not able to accomplish this in time, and hence these methods were pulled back to varying degrees to accomodate.

Greater election dynamics, such as fundraising, as it become mostly irrelavent when mid-development we dropped a good deal
of the changing electoral environment plans. This made having the dynamics much less useful, and far more of a way to trick 
the game. Thus, other dynamics were prioritized. Then to move onto why the changing electoral climate was not implemented, 
mainly has to do with the lack of more dynamic effects from Legislation. These changes would have been required to actuallu
motivate some change in the elections. Yet, the reason for the lack of dynamic effects was the huge amount of text that would 
have needed to go into making it presentable. The Legislation texts and numbers took a while on its own, because that work was very time 
consuming. There would have been little real functionality payoff for quite a while if I had attempted to develop and write all 
the outcomes that would have to occur, hence it was scrapped in favor of other work that could yeild better benefits in the time alloted.


====================================================================================
Lesson Learned 

1. Aim small. Place the expectations bar low. That way you'll be sure to acheive it. Then see where you can go from there.

2. Do not choose a project or task and then plan it out with loop sketches and UML diagrams. The UML and trace diagrams 
should come first, before topic of project is settled on so reachable goals are choosen.

3. Focus first on the largest, most complicated methods within a class, then add instance variables and methods as 
they are needed to make the code work, so there is not a huge sprawl of potentially needed variables and methods before
the major work is even done.

4. As methods are completed a dummy Class for testing them should be expanded. The dummy class should not be made at test
time when one is distracted, but during development of a class so it is there when the class is finished. This way
no other class needs to be finished for testing to occur.

5. Start with basic functionality, the logic or commands need not be clear nor effecient. Once the basic logic that forms 
the fondation of the method's functionality is completed, should one even begin to think about adding complexity, simplicity,
balance, and efficiency.

6. Create a clear class development schedule for assigning work. Instead of going to issues as they arise, or assigning 
classes to write in chunks. Instead determine which class relies the least on all other classes, then the 2nd least,
and so on and assign them based on this order. 

7. Keep a journal of changes with dates.

8. Be wary of printed text, it can be a very time intensive and consuming rabbit hole, that does npt produce much solid 
code at the end.

9. Modularize the development of large methods. Break it down into simple conditionals or iterative loops that can be 
taken easily on their own, and when added together easily create what is desired.

10. Create a standard structure for your comments, and consistently apply it to everything that is instantiated as you go
in this structure. Sacrifice the time to write the comments then, as it will save much time later when code can be clearly
read and understand, fascilitating collaboration.

11. Build small, build simple, build succintly. Think all that too. This will make a solid fondation, and from there the
code can blossum out into the complicated program you desire it to be, without falling from its own staggering size.
